{"pages":[{"title":"About","text":"Hi! Welcome to Not Overflow. Our purpose is to help you prepare technical interviews in a more effective way. We are all aware of the existence of many good online coding pratice platforms such as Leetcode, GeeksforGeeks, HackeRrank and etc. But the problem is that they usually contain massive exercises and it’s (almost) impossible and not necessary to solve every single problem. In Not Overflow, we love discovering patterns. We will tell you how to come up with solutions for 10 problems on Leetcode in 20 minutes (This doesn’t include coding time since it differs from person to person) by finding patterns and understanding the core knowledge. We will also provide information on system design interview preparation and some techniques to be more productive during the preparation. This is important since we all have limited time! If you have any question/feedback or would like to join in our team, please drop an email to hi.notoverflow@gmail.com. SMART work pays off!","link":"/about/index.html"}],"posts":[{"title":"Study note - Designing Data-Intensive Applications Chaprter I","text":"This is the first study note of book Designing Data-Intensive Applications. This book is recommended to anyone who develop applications that need some kind of backend for storing or processing data via network. It disusses different design principles of data systems and trade-offs, and various technologies that make the design happen. Chapter 1 Reliable, Scalable, and Maintainable ApplicationsA data-intensive application usually has common functionality: Store data persistently and the data is available to the other applications (database) Keep the results of expensive operations in memory to speed up reads (cache) Allow users to do quick search. (search indexes) Process data in real-time, and handle data asynchronously (streaming process) Periodically process a large chunk of data (batch processing) Nowadays, applications have such demanding requirements that a single tool can’t meet all of the data processing and storing needs. So a real data system typically consists of various components. The book shows an example: During the design phase, there are a lot of tricky questions coming up: How do you ensure that the data remains correct and complete, even when things go wrong internally? How do you provide consistently good performance to clients, even when parts of your system are degraded? How do you scale to handle an increase in load? In general, these questions are closely connected to three core concepts of a data-intensive application, which are: Reliability Scalability Maintainability ReliabilityA reliable system should continue to work correctly even there are hardware, software and human errors. To what extend do we mean by “work correctly”? There are some typical expectations: The application performs the function that the user expects. The application tolerates user mistakes and unexpected behaviors. Its performance is good enough for basic requirements under expected load and data volume. It prevents unauthorized access and abuse. The book talks about an interesting point which is Fault vs Failure. A fault is usually defined as one component deviates from its specification, whereas a failure is when the system as a whole stops providing the required service to users. It is nearly impossible to reduce the chance of having a fault to zero, but what we can do is to Design a fault-tolerance system that prevents faults from causing failures. ScalabilityA scalable system should be able to handle the increase in data volume, traffic volume or complexity. MaintainabilityA maintainable system should be easy for engineers and operators to continuously work on it.","link":"/intro.html"}],"tags":[],"categories":[{"name":"Study Note","slug":"Study-Note","link":"/categories/Study-Note/"}]}